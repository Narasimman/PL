%{
#include <iostream>
using namespace std;
int yylex(); 
int yyerror(const char *p) { std::cerr << "error: " << p << std::endl; };
%}

%union {
    int val;
};

%start prog

%token LPAREN RPAREN
%token PLUS MINUS MUL DIV
%token <val> NUM
%type <val> expr term factor

%%

prog : expr                             { std::cout << $1 << std::endl; }
     ;

expr : term                             /* default action: { $$ = $1; } */
     ;

term : PLUS term term                  { $$ = $2 + $3; }
     | MINUS term term                 { $$ = $2 - $3; }
     | MUL term term                   { $$ = $2 * $3; }
     | DIV term term                   { $$ = $2 / $3; }
     | factor
     ;

factor : NUM                            /* default action: { $$ = $1; } */
       ;

%%

int main()
{
    yyparse(); // A parsing function that will be generated by Bison.
    return 0;
}

